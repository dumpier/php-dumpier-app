<style>
div#game-skill { margin:auto; text-align:center; padding: 10px 100px; }


.game-battle-actor { position: relative; margin-bottom: 5px; }
.game-battle-actor .masker { position:absolute; width:100%; height:100%;opacity: 0.3; }


.game-gauge {background: #fd7e14; padding:1px; margin-bottom:5px; }
.game-gauge .bar { background: #17a2b8; width:100px; height:8px; }
.game-gauge .val { background:#fd7e14; width:40px; height:8px; }

#game-battle-log { position:fixed; bottom:0px; background:#f9f9f9; padding:5px; border: solid 5px #ddd; width:100vw; height: 400px; overflow: scroll; }
</style>

<div id="game-actor-list" style="position: relative;">
	<div style="position: absolute; width:100%; height:100%; opacity: 0.8;"><div id="game-skill"></div></div>

	<div style="float: left;">
		@foreach ($Battle->AllyDeck->Actors as $key=>$Actor)
		<div id="game-actor-{{$Actor->actor_id}}" class="game-battle-actor">
			<div class="masker"></div> <!-- -------- mask -------- -->

			<div style="float: left;">{@ echo character()->image($Actor->actor_id) }</div>
			<div style="float: left; margin-left:5px;">
				<div class="game-gauge"><div class="bar"><div class="val"></div></div></div>
				<div class="game-gauge"><div class="bar"><div class="val"></div></div></div>
			</div>
			<br style="clear: both;">
		</div>
		@endforeach
	</div>

	<div style="float: right; text-align: right;">
		@foreach ($Battle->OppenentDeck->Actors as $key=>$Actor)
		<div id="game-actor-{{$Actor->actor_id}}" class="game-battle-actor">
			<div class="masker"></div> <!-- -------- mask -------- -->

			<div style="float: right;">{@ echo character()->image($Actor->actor_id) }</div>
			<div style="float: right; margin-right:5px;">
				<div class="game-gauge"><div class="bar"><div class="val"></div></div></div>
				<div class="game-gauge"><div class="bar"><div class="val"></div></div></div>
			</div>
			<br style="clear: both;">
		</div>
		@endforeach
	</div>
	<br style="clear: both;">
</div>

<div class="text-right"><a href="javascript:void(0);" class="btn btn-danger" onclick="battle.play();">バトル演出</a></div>

<div id="game-battle-log"></div>

<script>
// -------------------------------------------------------------------
// バトル演出
// -------------------------------------------------------------------
var battle = battle || {
	is_playing : false,

	// 待ち時間
	timeout : function(ms=1000) {
		return new Promise(resolve => setTimeout(() => { resolve(); }, ms));
	},

	// バトル演出の開始
	play : async function() {
		if(this.is_playing){
			console.log(`Is playing !!!`);
			alert(`Is playing !!!`);
			return ;
		}

		this.is_playing = true;
		console.log(this.logs);
		await this.rounds(this.logs);
		this.is_playing = false;
	},

	// ラウンド一覧の演出
	rounds : async function(datas) {
		for (let key in datas) {
			let data = datas[key];
			$("#game-battle-log").append(`<p># round : ${data.round}</p>`);
			await this.turns(data.Turns);
		}
	},

	// ターン一覧の演出
	turns : async function(datas) {
		for (let key in datas) {
			let data = datas[key];
			$("#game-battle-log").append(`<p style="padding-left:5px;">- turn : ${data.turn}, actor : ${data.actor_id}</p>`);
			await this.effects(data.Effects);
		}
	},

	// 各種効果の演出
	effects : async function(datas) {
		for (let key in datas) {
			let data = datas[key];

			$("#game-battle-log").append(`<p style="padding-left:10px;">- effect : ${key}, skill : ${data.skill_id}</p>`);
			await this.actions(data.Actions);
			$("#game-skill").html("");
		}
	},

	// アクション一覧
	actions : async function(datas) {
		for (let key in datas) {
			let data = datas[key];
			await this.action(data);
		}
	},

	// アクションの再現
	action : async function(data) {
		await this.loging(data);
		await this.actor(data);
		await this.target(data);
		battle.el.actor.mask(data.actor_id).html("").hide();
		battle.el.actor.mask(data.target_id).html("").hide();
		return this.timeout(500);
	},

	// 行動者の動き
	actor : async function(data) {
		battle.el.actor.mask(data.actor_id).css({"display":"block","background":"#007bff"});
		// TODO とりあえずランダムでエフェクトを選ぶ
		let effect_id = Math.floor( Math.random() * 5 ) + 1;
		battle.el.actor.mask(data.actor_id).html(`<img width=100% height=100% src="/res/images/effect/${effect_id}.gif">`);
		// await anime.png.show(battle.el.get(data.actor_id).children("div.masker"));

		battle.el.actor.get(data.actor_id).effect("shake", {times:1, distance: 10, direction:"left"}, 400);
		return this.timeout(600);
	},

	// ターゲットの動き
	target : async function(data) {
		battle.el.actor.mask(data.target_id).css({"display":"block","background":"#e83e8c"});
		battle.el.actor.get(data.target_id).effect("shake", {times:2, distance: 3, direction:"down"}, 300);
		return this.timeout(600);
	},

	// ログの出力
	loging : async function(data) {
		$("#game-battle-log").append(`<p style="padding-left:15px;">- action,  actor:${data.actor_id}, target:${data.target_id}</p>`);
		document.getElementById("game-battle-log").scrollTop = document.getElementById("game-battle-log").scrollHeight;
	},

	// バトルログ
	logs : <?php echo ($Battle->LogManage->toJson()); ?>,
}

battle.el = {}
battle.el.actor = {
	get: function(actor_id) {
		return $("div#game-actor-" + actor_id);
	},
	mask: function(actor_id) {
		return this.get(actor_id).children("div.masker");
	},
}

var anime = anime || {}
anime.png = {
	show : async function(el){
		el.css({"display":"block", "background": "url(/res/images/effect/battle/320x240/pipo-btleffect001.png) no-repeat top"});
		await this.loop(el);
	},

	loop : async function(el){
		el.css({"background-position": 100 + "px " + 100 + "px"});
		setTimeout(this.loop(el), 100);
	},
}
//-------------------------------------------------------------------


// -------------------------------------------------------------------
// ゲージ
// -------------------------------------------------------------------
var gauge = {

}

</script>


<?php ;?>
